{"version":3,"file":"index.js","mappings":";;;;;;;;;;;;;;;AAA0C;AAC3B;AACf;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gCAAgC,gGAAgG;AAChgBAAgB,gBAAgB;AAChC,+BAA+B,mDAAU;AACzC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;ACvLA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4DAA4D,YAAY;AACxE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uCAAuC,qBAAqB;AAC5D,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA,kCAAkC,eAAe;AACjD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA,YAAY;AACZ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yBAAyB;AACzB,0BAA0B;AAC1B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,YAAY;AACZ;AACA;AACA;AACA;AACA;AACA,wBAAwB,sBAAsB;AAC9C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yBAAyB;AACzB,wBAAwB,UAAU;AAClC,4BAA4B,UAAU;AACtC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4BAA4B,qBAAqB;AACjD;AACA;AACA,0BAA0B,uBAAuB;AACjD;AACA;AACA,yBAAyB,mBAAmB;AAC5C;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,0BAA0B;AAC1B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACsB;;;;;;;UC1StB;UACA;;UAEA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;;UAEA;UACA;;UAEA;UACA;UACA;;;;;WCtBA;WACA;WACA;WACA;WACA,yCAAyC,wCAAwC;WACjF;WACA;WACA;;;;;WCPA;;;;;WCAA;WACA;WACA;WACA,uDAAuD,iBAAiB;WACxE;WACA,gDAAgD,aAAa;WAC7D;;;;;;;;;;;;ACN4B;AAC5B,qCAAG","sources":["webpack://my-first-simulation/./src/App.ts","webpack://my-first-simulation/./src/Simulation.ts","webpack://my-first-simulation/webpack/bootstrap","webpack://my-first-simulation/webpack/runtime/define property getters","webpack://my-first-simulation/webpack/runtime/hasOwnProperty shorthand","webpack://my-first-simulation/webpack/runtime/make namespace object","webpack://my-first-simulation/./src/index.ts"],"sourcesContent":["import { Simulation } from './Simulation';\nexport { App };\nclass App {\n    static start() {\n        this.model = new Model();\n        this.view = new View();\n        this.controller = new Controller();\n        this.view.render();\n    }\n}\nclass Model {\n    constructor() {\n        this.data = {\n            simulation: null,\n            simulation_config: {\n                width: 800,\n                height: 800,\n                n_particles: 1000,\n                gravity: 0,\n                bounce: 0.4,\n                friction: 0.1,\n                pressure_multiplier: 0.007,\n                target_density: 0.2,\n                smoothing_radius: 50,\n            },\n            simulation_running: false,\n        };\n    }\n}\nclass View {\n    constructor() {\n        this.elements = {};\n    }\n    render() {\n        const main_page = this.main_page();\n        document.body.appendChild(main_page);\n    }\n    main_page() {\n        const navbar = this.navbar();\n        const main_page = document.createElement('div');\n        main_page.classList.add('container-xxl');\n        {\n            main_page.appendChild(navbar);\n            const card = document.createElement('div');\n            card.classList.add('card');\n            const card_body = document.createElement('div');\n            card_body.classList.add('card-body');\n            const row = document.createElement('div');\n            row.classList.add('row', 'mb-2');\n            // Simulation controls\n            {\n                const col = document.createElement('div');\n                col.classList.add('col-3');\n                {\n                    // Simulation parameters form\n                    const form = document.createElement('form');\n                    {\n                        const { gravity, n_particles, friction, bounce, pressure_multiplier, target_density, smoothing_radius } = App.model.data.simulation_config;\n                        const n_particles_input = this.slider('Particles', 'n_particles', n_particles, 0, 5000, 1, App.controller.update_simulation_config);\n                        const gravity_input = this.slider('Gravity', 'gravity', gravity, 0, 1, 0.01, App.controller.update_simulation_config);\n                        const friction_input = this.slider('Friction', 'friction', friction, 0, 1, 0.01, App.controller.update_simulation_config);\n                        const bounce_input = this.slider('Bounce', 'bounce', bounce, 0, 1, 0.01, App.controller.update_simulation_config);\n                        const pressure_multiplier_input = this.slider('Pressure multiplier', 'pressure_multiplier', pressure_multiplier, 0, 10, 0.01, App.controller.update_simulation_config);\n                        const target_density_input = this.slider('Target density', 'target_density', target_density, 0, 0.1, 0.001, App.controller.update_simulation_config);\n                        const smoothing_radius_input = this.slider('Smoothing radius', 'smoothing_radius', smoothing_radius, 0, 100, 1, App.controller.update_simulation_config);\n                        form.appendChild(n_particles_input);\n                        form.appendChild(gravity_input);\n                        form.appendChild(friction_input);\n                        form.appendChild(bounce_input);\n                        form.appendChild(pressure_multiplier_input);\n                        form.appendChild(target_density_input);\n                        form.appendChild(smoothing_radius_input);\n                    }\n                    col.appendChild(form);\n                    // Control buttons\n                    const row = document.createElement('div');\n                    row.classList.add('row', 'mb-2');\n                    {\n                        const col = document.createElement('div');\n                        col.classList.add('col-12');\n                        const start_button = document.createElement('button');\n                        start_button.classList.add('btn', 'btn-primary', 'mx-2');\n                        start_button.innerText = 'Start';\n                        start_button.onclick = App.controller.start_simulation;\n                        col.appendChild(start_button);\n                        const stop_button = document.createElement('button');\n                        stop_button.classList.add('btn', 'btn-danger', 'mx-2');\n                        stop_button.innerText = 'Stop';\n                        stop_button.onclick = App.controller.stop_simulation;\n                        col.appendChild(stop_button);\n                        row.appendChild(col);\n                    }\n                    col.appendChild(row);\n                }\n                row.appendChild(col);\n            }\n            // Simulation canvas\n            {\n                const col = document.createElement('div');\n                col.classList.add('col-9');\n                {\n                    const canvas = document.createElement('canvas');\n                    canvas.width = App.model.data.simulation_config.width;\n                    canvas.height = App.model.data.simulation_config.height;\n                    canvas.onclick = App.controller.onclick_simulation;\n                    col.appendChild(canvas);\n                    this.elements['canvas'] = canvas;\n                }\n                row.appendChild(col);\n            }\n            card_body.appendChild(row);\n            card.appendChild(card_body);\n            main_page.appendChild(card);\n        }\n        return main_page;\n    }\n    slider(label, id, value, min, max, step, onchange) {\n        const slider = document.createElement('div');\n        slider.classList.add('mb-2');\n        {\n            const label_element = document.createElement('label');\n            label_element.setAttribute('for', id);\n            label_element.innerText = label;\n            slider.appendChild(label_element);\n            const input = document.createElement('input');\n            input.classList.add('form-range');\n            input.type = 'range';\n            input.id = id;\n            input.value = value.toString();\n            input.min = min.toString();\n            input.max = max.toString();\n            input.step = step.toString();\n            input.onchange = onchange;\n            slider.appendChild(input);\n        }\n        return slider;\n    }\n    navbar() {\n        const navbar = document.createElement('nav');\n        const container = document.createElement('div');\n        const brand = document.createElement('a');\n        navbar.classList.add('navbar', 'bg-body-tertiary', 'rounded', 'my-2', 'shadow-sm');\n        container.classList.add('container-fluid');\n        brand.classList.add('navbar-brand');\n        brand.innerText = 'Ca arrive fort !';\n        container.appendChild(brand);\n        navbar.appendChild(container);\n        return navbar;\n    }\n}\nclass Controller {\n    start_simulation(event) {\n        if (App.model.data.simulation_running)\n            return;\n        App.model.data.simulation_running = true;\n        const canvas = App.view.elements['canvas'];\n        const ctx = canvas.getContext('2d');\n        if (ctx === null)\n            return;\n        const { width, height } = App.model.data.simulation_config;\n        const simulation = new Simulation(ctx, width, height, App.model.data.simulation_config);\n        App.model.data.simulation = simulation;\n        simulation.start();\n    }\n    stop_simulation(event) {\n        var _a;\n        if (!App.model.data.simulation_running)\n            return;\n        App.model.data.simulation_running = false;\n        (_a = App.model.data.simulation) === null || _a === void 0 ? void 0 : _a.stop();\n    }\n    onclick_simulation(event) {\n        var _a;\n        (_a = App.model.data.simulation) === null || _a === void 0 ? void 0 : _a.onclick(event.offsetX, event.offsetY);\n    }\n    update_simulation_config(event) {\n        var _a;\n        const target = event.target;\n        const key = target.id;\n        const value = parseFloat(target.value);\n        App.model.data.simulation_config[key] = value;\n        (_a = App.model.data.simulation) === null || _a === void 0 ? void 0 : _a.configure(App.model.data.simulation_config);\n    }\n}\n","class Simulation {\n    constructor(ctx, width, height, config) {\n        this.running = false;\n        // Parameters\n        this.n_particles = 0;\n        this.gravity = 0;\n        this.friction = 0;\n        this.bounce = 0;\n        this.target_density = 1;\n        this.pressure_multiplier = 1;\n        this.smoothing_radius = 0;\n        this.start_indices = [];\n        // Debug\n        this.debug = new Simulation_Debug();\n        this.ctx = ctx;\n        this.width = width;\n        this.height = height;\n        this.spacial_lookup = [];\n        this.configure(config);\n        // this.particles = this.create_random_particles();\n        this.particles = this.create_grid_particles();\n        this.densities = this.particles.map(particle => particle.mass);\n        this.velocities = this.particles.map(particle => ({ x: 0, y: 0 }));\n    }\n    configure(config) {\n        this.n_particles = config.n_particles;\n        this.gravity = config.gravity;\n        this.friction = config.friction;\n        this.bounce = config.bounce;\n        this.target_density = config.target_density;\n        this.pressure_multiplier = config.pressure_multiplier;\n        this.smoothing_radius = config.smoothing_radius;\n        console.log('config:', config);\n    }\n    start() {\n        this.running = true;\n        this.animate();\n    }\n    stop() {\n        this.running = false;\n    }\n    restart() {\n        this.stop();\n        this.start();\n    }\n    onclick(x, y) {\n        this.debug.add_circle(x, y, this.smoothing_radius, 'red');\n        const density = this.calculate_density(x, y);\n        console.log('density:', density);\n    }\n    position_to_cell_coord(x, y) {\n        const cell_size = this.smoothing_radius * 2;\n        const cell_x = Math.floor(x / cell_size);\n        const cell_y = Math.floor(y / cell_size);\n        return { x: cell_x, y: cell_y };\n    }\n    cell_coord_to_key(cell_coord) {\n        return cell_coord.x + cell_coord.y * this.width;\n    }\n    key_to_cell_coord(key) {\n        const x = key % this.width;\n        const y = Math.floor(key / this.width);\n        return { x, y };\n    }\n    update_spacial_lookup() {\n        this.spacial_lookup = [];\n        this.start_indices = [];\n        // Create spacial lookup\n        this.particles.forEach((particle, particle_index) => {\n            const cell_coord = this.position_to_cell_coord(particle.x, particle.y);\n            const key = this.cell_coord_to_key(cell_coord);\n            this.spacial_lookup.push({ key, particle_index });\n        });\n        // Sort by key\n        this.spacial_lookup.sort((a, b) => a.key - b.key);\n        // Create start indices\n        this.spacial_lookup.forEach((entry, i) => {\n            if (i === 0 || entry.key !== this.spacial_lookup[i - 1].key) {\n                this.start_indices[entry.key] = i;\n            }\n        });\n    }\n    foreach_particles_within_radius(x, y, callback) {\n        const cell_coord = this.position_to_cell_coord(x, y);\n        const key = this.cell_coord_to_key(cell_coord);\n        const start_index = this.start_indices[key];\n        const end_index = this.start_indices[key + 1] || this.spacial_lookup.length;\n        for (let i = start_index; i < end_index; i++) {\n            const entry = this.spacial_lookup[i];\n            const particle = this.particles[entry.particle_index];\n            const distance = this.calculate_distance(x, y, particle.x, particle.y);\n            if (distance < this.smoothing_radius) {\n                callback(particle, entry.particle_index);\n            }\n        }\n    }\n    smoothing_kernel(distance) {\n        if (distance >= this.smoothing_radius)\n            return 0;\n        const volume = (Math.PI * Math.pow(this.smoothing_radius, 4)) / 6;\n        return Math.pow(this.smoothing_radius - distance, 2) / volume;\n    }\n    somoothing_kernel_derivative(distance) {\n        if (distance >= this.smoothing_radius)\n            return 0;\n        const scale = 12 / (Math.PI * Math.pow(this.smoothing_radius, 4));\n        return Math.pow(distance - this.smoothing_radius, 1) * scale;\n    }\n    calculate_distance(x1, y1, x2, y2) {\n        return Math.sqrt(Math.pow(x2 - x1, 2) + Math.pow(y2 - y1, 2));\n    }\n    calculate_density(x, y) {\n        let density = 0;\n        this.foreach_particles_within_radius(x, y, (particle, index) => {\n            const distance = this.calculate_distance(x, y, particle.x, particle.y);\n            const influence = this.smoothing_kernel(distance);\n            density += particle.mass * influence;\n        });\n        // this.particles.forEach(particle => {\n        //     const distance = this.calculate_distance(x, y, particle.x, particle.y);\n        //     const influence = this.smoothing_kernel(distance);\n        //     density += particle.mass * influence\n        // });\n        return density;\n    }\n    convert_density_to_pressure(density) {\n        return this.pressure_multiplier * (density - this.target_density);\n    }\n    calculate_shared_pressure(density1, density2) {\n        const pressure1 = this.convert_density_to_pressure(density1);\n        const pressure2 = this.convert_density_to_pressure(density2);\n        return (pressure1 + pressure2) / 2;\n    }\n    calculate_pressure(particle_index) {\n        let pressure = { x: 0, y: 0 };\n        let direction = { x: 0, y: 0 };\n        const particle = this.particles[particle_index];\n        this.foreach_particles_within_radius(particle.x, particle.y, (other_particle, other_particle_index) => {\n            if (other_particle_index === particle_index) {\n                return;\n            }\n            const distance = this.calculate_distance(particle.x, particle.y, other_particle.x, other_particle.y);\n            if (distance == 0) {\n                direction.x = Math.random();\n                direction.y = Math.random();\n            }\n            else {\n                direction.x = (other_particle.x - particle.x) / distance;\n                direction.y = (other_particle.y - particle.y) / distance;\n            }\n            const slope = this.somoothing_kernel_derivative(distance);\n            const density = this.densities[other_particle_index];\n            const shared_pressure = this.calculate_shared_pressure(density, this.densities[particle_index]);\n            pressure.x += shared_pressure * direction.x * slope * particle.mass / density;\n            pressure.y += shared_pressure * direction.y * slope * particle.mass / density;\n        });\n        // this.particles.forEach((other_particle: Particle, other_particle_index: number) => {\n        //     if (other_particle_index === particle_index) {\n        //         return;\n        //     }\n        //     const distance = this.calculate_distance(particle.x, particle.y, other_particle.x, other_particle.y);\n        //     if (distance == 0) {\n        //         direction.x = Math.random();\n        //         direction.y = Math.random();\n        //     } else {\n        //         direction.x = (other_particle.x - particle.x) / distance;\n        //         direction.y = (other_particle.y - particle.y) / distance;\n        //     }\n        //     const slope = this.somoothing_kernel_derivative(distance);\n        //     const density = this.densities[other_particle_index];\n        //     const shared_pressure = this.calculate_shared_pressure(density, this.densities[particle_index]);\n        //     pressure.x += shared_pressure * direction.x * slope * particle.mass / density;\n        //     pressure.y += shared_pressure * direction.y * slope * particle.mass / density;\n        // });\n        return pressure;\n    }\n    create_random_particles() {\n        const particles = [];\n        const mass = 10;\n        for (let i = 0; i < this.n_particles; i++) {\n            const x = mass + Math.random() * (this.width - mass * 2);\n            const y = mass + Math.random() * (this.height - mass * 2);\n            const color = 'blue';\n            particles.push(new Particle(x, y, mass, color));\n        }\n        return particles;\n    }\n    create_grid_particles() {\n        const particles = [];\n        const mass = 10;\n        const cols = 30;\n        const rows = 30;\n        const center = { x: this.width / 2, y: this.height / 2 };\n        for (let i = 0; i < rows; i++) {\n            for (let j = 0; j < cols; j++) {\n                const x = center.x - cols / 2 * mass + j * mass;\n                const y = center.y - rows / 2 * mass + i * mass;\n                const color = 'blue';\n                particles.push(new Particle(x, y, mass, color));\n            }\n        }\n        return particles;\n    }\n    update_particles() {\n        this.particles.forEach((particle, i) => {\n            this.densities[i] = this.calculate_density(particle.x, particle.y);\n            // Apply gravity\n            this.velocities[i].y += this.gravity;\n            // Apply friction\n            // this.velocities[i].x *= this.friction / 2;\n            // this.velocities[i].y *= this.friction / 2;\n            // Apply pressure\n            const pressure = this.calculate_pressure(i);\n            this.velocities[i].x += pressure.x / this.densities[i];\n            this.velocities[i].y += pressure.y / this.densities[i];\n            // Bounce\n            if (particle.x - particle.radius < 0 || particle.x + particle.radius > this.width) {\n                this.velocities[i].x *= -this.bounce;\n            }\n            if (particle.y - particle.radius < 0 || particle.y + particle.radius > this.height) {\n                this.velocities[i].y *= -this.bounce;\n            }\n            // Update position\n            particle.x += this.velocities[i].x;\n            particle.y += this.velocities[i].y;\n        });\n    }\n    update() {\n        this.update_spacial_lookup();\n        this.update_particles();\n    }\n    draw() {\n        this.particles.forEach(particle => {\n            particle.draw(this.ctx);\n        });\n        this.debug.draw(this.ctx);\n    }\n    animate() {\n        this.ctx.clearRect(0, 0, this.width, this.height);\n        this.draw();\n        this.update();\n        if (this.running) {\n            requestAnimationFrame(() => this.animate());\n        }\n    }\n}\nclass Simulation_Debug {\n    constructor() {\n        this.circles = [];\n        this.lines = [];\n        this.text = [];\n    }\n    add_circle(x, y, radius, color) {\n        this.circles.push({ x, y, radius, color });\n    }\n    add_line(x1, y1, x2, y2, color) {\n        this.lines.push({ x1, y1, x2, y2, color });\n    }\n    add_text(x, y, text, color) {\n        this.text.push({ x, y, text, color });\n    }\n    draw(ctx) {\n        this.circles.forEach(circle => {\n            ctx.beginPath();\n            ctx.arc(circle.x, circle.y, circle.radius, 0, Math.PI * 2);\n            ctx.strokeStyle = circle.color;\n            ctx.stroke();\n        });\n        this.lines.forEach(line => {\n            ctx.beginPath();\n            ctx.moveTo(line.x1, line.y1);\n            ctx.lineTo(line.x2, line.y2);\n            ctx.strokeStyle = line.color;\n            ctx.stroke();\n        });\n        this.text.forEach(text => {\n            ctx.font = '16px Arial';\n            ctx.fillStyle = text.color;\n            ctx.fillText(text.text, text.x, text.y);\n        });\n    }\n}\nclass Particle {\n    constructor(x, y, mass, color) {\n        this.x = x;\n        this.y = y;\n        this.mass = mass;\n        this.radius = mass / 2;\n        this.color = color;\n        this.velocity = { x: 0, y: 0 };\n    }\n    draw(ctx) {\n        ctx.beginPath();\n        ctx.arc(this.x, this.y, this.radius, 0, Math.PI * 2);\n        ctx.fillStyle = this.color;\n        ctx.fill();\n    }\n}\nexport { Simulation };\n","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId](module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","// define getter functions for harmony exports\n__webpack_require__.d = (exports, definition) => {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))","// define __esModule on exports\n__webpack_require__.r = (exports) => {\n\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\t}\n\tObject.defineProperty(exports, '__esModule', { value: true });\n};","import { App } from './App';\nApp.start();\n"],"names":[],"sourceRoot":""}